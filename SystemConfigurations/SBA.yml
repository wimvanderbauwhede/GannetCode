# For SystemC, it seems both service id and address must be contiguous
# And we must have exactly 15 services!

# Service Id: { Service Instance name: [Service Core Id, Core Function name, Nthreads], Addr: Service NoC Address }
# Service Name is the "class" or "type" of the service. It is basically an alias for the Core Function name
# Service Core name is actually the name of a particulat instance of the service.

--- # SystemConfiguration.rb
System:
  NServiceInstances: 15 # excluding gateway
  ServiceInstances:
    0: { GATEWAY: [GATEWAY, 0, sba_GATEWAY, 1, [0, 0]], Addr: 0 }    
    1: { IO: [IO, 0, ls_IO, 1, [1, 1]], Addr: 3}
    2: { BEGIN: [BEGIN, 0, ls_BEGIN, 1, [1, 1]], Addr: 2 }    
    3: { LET: [LET, 0, ls_LET, 1, [1, 1]], Addr: 1 }
    4: { IF: [IF, 0, ls_IF, 1, [0, 0]], Addr: 4 }    
    5: { RAND: [RAND, 0, ls_RAND, 1, [0, 0]], Addr: 5 }            
    7: { ALU: [ALU, 0, ls_ALU, 1, [0, 1]], Addr: 7 }   
    8: { APPLY: [APPLY, 0, ls_APPLY, 1, [0, 0]], Addr: 8 }     
    9: { LAMBDA: [LAMBDA, 0, ls_LAMBDA, 1, [0, 0]], Addr: 9 }    
    10: { CALL: [CALL, 0, ls_CALL, 1, [0, 0]], Addr: 10 }
    11: { UNQUOTE: [UNQUOTE, 0, ls_UNQUOTE, 1, [0, 0]], Addr: 11 }
    12: { UNSYMBOL: [UNSYMBOL, 0, ls_UNSYMBOL, 1, [0, 0]], Addr: 12 }
    13: { COUNT: [COUNT, 0, ls_COUNTER, 1, [0, 0]], Addr: 13 }
    14: { COUNTDOWN: [COUNTDOWN, 0, ls_COUNTDOWN, 1, [0, 0]], Addr: 14 }
    15: { ITERATOR: [Iterator, 0, none, 1, [0, 0]], Addr: 15 }
    6: { NONE8: [None, 0, none, 1, [0, 0]], Addr: 6 }     
    
  Aliases:
  # Alias Name: [Service Name, Service Id, Opcode]
    NONE: [NONE, 0, 0, [0, 0]]
    'plus': [ALU, 7, 9, [0, 1]]
    minus: [ALU, 7, 10, [0, 1]]
    times: [ALU, 7, 11, [0, 1]]
    over: [ALU, 7, 12, [0, 18]]
    lt: [ALU, 7, 13, [0, 1]]
    gt: [ALU, 7, 14, [0, 1]]
    eq: [ALU, 7, 15, [0, 1]]
    not: [ALU, 7, 21, [0, 1]] # (! 1) :  0; (! 0) :  1; otherwise :  Error
    RETURN: [IF, 4, 1, [0, 0]]    
    RETURNTC: [IF, 4, 2, [0, 0]]
    IFTC: [IF, 4, 3, [0, 0]]
    FOPEN: [IO, 1, 1, [0, 0]]
#    IO.OPEN: [IO, 1, 1, [0, 0]]
    FCLOSE: [IO, 1, 2, [0, 0]]
#    IO.CLOSE: [IO, 1, 2, [0, 0]]
#    IO.READ: [IO, 1, 3, [0, 0]]
#    IO.WRITE: [IO, 1, 4, [0, 0]]
    DISPLAY: [IO, 1, 5, [0, 0]]
#    IO.DISPLAY: [IO, 1, 5, [0, 0]]
    ASSIGN: [LET, 3, 1, [0, 0]]
    UPDATE: [LET, 3, 3, [0, 0]]
    READ: [LET, 3, 2, [0, 0]]
    LIST: [LET, 3, 4, [0, 0]]
    HEAD: [LET, 3, 5, [0, 0]]
    TAIL: [LET, 3, 6, [0, 0]]
    LENGTH: [LET, 3, 7, [0, 0]]
    CONS: [LET, 3, 8, [0, 0]]
    APPEND: [LET, 3, 9, [0, 0]]
    LETTC: [LET, 3, 10, [0, 0]]
    APPLYTC: [APPLY, 8, 1, [0, 0]]
    S_RETURN: [IF, 4, 31, [0, 0]]
    S_IF: [IF, 4, 31, [0, 0]]
#    iterator.loop: [ITERATOR, 15, 1, [0, 0]] 
#    iterator.value: [ITERATOR, 15, 2, [0, 0]] 
  
  # Services relate to the instance via the "Service" field in the instance record. So no need for the Id or Name
  # The compiler gets e.g. it1.loop ; it1 : Service = Iterator => Iterator.loop
  # I think we actually don't need this for IF and LET as these don't use the object notation
  # ALU is special because it uses operators.
  # For all other services we should use this mechanism; 
  # Every Service can/must have a 'new' method, which is mapped by default to [0, [0,0]]
  # For services that are pure functions this mechanism has some overhead but that can't be helped.
  # In terms of the "opcode", the idea is that this file will be generated by a compiler
  # So we can assume that the method id is unique. It's either that or provide an Id for the Service
  # For now I'll do the latter, ugly though it is.
  # Note that the ServiceId is arbitrary, as long as they are all unique
  Services:
    ALU: 
        ServiceId: 7
        plus: [9, [0, 1]]
        minus: [10, [0, 1]]
        times: [11, [0, 1]]
        over: [12, [0, 18]]
        lt: [13, [0, 1]]
        gt: [14, [0, 1]]
        eq: [15, [0, 1]]
        not: [21, [0, 1]]
    IO:
        ServiceId: 1
        open: [1, [0, 0]]
        close: [2, [0, 0]]
        read: [3, [0, 0]]
        write: [4, [0, 0]]
        display: [5, [0, 0]]    
    Iterator:
        ServiceId: 15
        new: [0, [0,0]]
        loop: [1, [0, 0]] 
        value: [2, [0, 0]]     

  ALU_Names:
    '+': 'plus'
    '-': minus
    '*': times
    '/': over
    '<': lt
    '>': gt
    '==': eq
    '!': not
    
